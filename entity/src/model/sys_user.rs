//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sys_user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub username: Option<String>,
    pub password: Option<String>,
    pub nick_name: Option<String>,
    pub side_mode: Option<String>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub header_img: Option<Vec<u8>>,
    pub base_color: Option<String>,
    pub active_color: Option<String>,
    pub phone: Option<String>,
    pub email: Option<String>,
    pub has_super_admin: Option<bool>,
    pub status: Option<bool>,
    pub created_at: Option<DateTimeUtc>,
    pub updated_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::sys_user_role::Entity")]
    SysUserRole,
}

impl Related<super::sys_user_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysUserRole.def()
    }
}

impl Related<super::sys_role::Entity> for Entity {
    fn to() -> RelationDef {
        super::sys_user_role::Relation::SysRole.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::sys_user_role::Relation::SysUser.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
